{"version":3,"file":"server.js","sources":["../src/middleware/operations.ts","../../../../src/actions.js","../src/actions/createTask.ts","../src/routes/operations/createTask.js","../src/actions/updateTask.ts","../src/routes/operations/updateTask.js","../../../../src/queries.js","../src/queries/getTasks.ts","../src/routes/operations/getTasks.js","../src/routes/operations/index.js","../src/middleware/globalMiddleware.ts","../src/routes/auth/me.js","../src/routes/auth/logout.ts","../src/auth/providers/username/login.ts","../src/auth/providers/username/signup.ts","../src/auth/providers/config/username.ts","../src/auth/providers/index.ts","../src/routes/auth/index.js","../src/routes/index.js","../src/app.js","../src/polyfill.ts","../src/server.ts"],"sourcesContent":["import { \n    deserialize as superjsonDeserialize,\n    serialize as superjsonSerialize,\n} from 'superjson'\nimport { handleRejection } from 'wasp/server/utils'\n\nexport function createOperation (handlerFn) {\n    return handleRejection(async (req, res) => {\n        const args = (req.body && superjsonDeserialize(req.body)) || {}\n        const context = {\n            user: req.user\n        }  \n        const result = await handlerFn(args, context)\n        const serializedResult = superjsonSerialize(result)\n        res.json(serializedResult)\n    })\n}\n\nexport function createQuery(handlerFn) {\n    return createOperation(handlerFn)\n}\n\nexport function createAction(handlerFn) {\n    return createOperation(handlerFn)\n}\n","import { HttpError } from 'wasp/server'\n\nexport const createTask = async (args, context) => {\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  return context.entities.Task.create({\n    data: {\n      description: args.description,\n      user: { connect: { id: context.user.id } },\n    },\n  })\n}\n\nexport const updateTask = async (args, context) => {\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  return context.entities.Task.updateMany({\n    where: { id: args.id, user: { id: context.user.id } },\n    data: { isDone: args.isDone },\n  })\n}\n","import { prisma } from 'wasp/server'\n\nimport { createTask } from '../../../../../src/actions'\n\n\nexport default async function (args, context) {\n  return (createTask as any)(args, {\n    ...context,\n    entities: {\n      Task: prisma.task,\n    },\n  })\n}\n\nexport type CreateTask = typeof createTask \n","import { createAction } from '../../middleware/operations.js'\nimport createTask from '../../actions/createTask.js'\n\nexport default createAction(createTask)\n","import { prisma } from 'wasp/server'\n\nimport { updateTask } from '../../../../../src/actions'\n\n\nexport default async function (args, context) {\n  return (updateTask as any)(args, {\n    ...context,\n    entities: {\n      Task: prisma.task,\n    },\n  })\n}\n\nexport type UpdateTask = typeof updateTask \n","import { createAction } from '../../middleware/operations.js'\nimport updateTask from '../../actions/updateTask.js'\n\nexport default createAction(updateTask)\n","import { HttpError } from 'wasp/server'\n\nexport const getTasks = async (args, context) => {\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  return context.entities.Task.findMany({\n    where: { user: { id: context.user.id } },\n    orderBy: { id: 'asc' },\n  })\n}\n","import { prisma } from 'wasp/server'\n\nimport { getTasks } from '../../../../../src/queries'\n\n\nexport default async function (args, context) {\n  return (getTasks as any)(args, {\n    ...context,\n    entities: {\n      Task: prisma.task,\n    },\n  })\n}\n\nexport type GetTasks = typeof getTasks \n","import { createQuery } from '../../middleware/operations.js'\nimport getTasks from '../../queries/getTasks.js'\n\nexport default createQuery(getTasks)\n","import express from 'express'\n\nimport auth from 'wasp/core/auth'\n\nimport createTask from './createTask.js'\nimport updateTask from './updateTask.js'\nimport getTasks from './getTasks.js'\n\nconst router = express.Router()\n\nrouter.post('/create-task', auth, createTask)\nrouter.post('/update-task', auth, updateTask)\nrouter.post('/get-tasks', auth, getTasks)\n\nexport default router\n","import express from 'express'\nimport cookieParser from 'cookie-parser'\nimport logger from 'morgan'\nimport cors from 'cors'\nimport helmet from 'helmet'\n\nimport { config } from 'wasp/server'\nimport type { MiddlewareConfig, MiddlewareConfigFn } from 'wasp/server/middleware'\nexport type { MiddlewareConfig, MiddlewareConfigFn } from 'wasp/server/middleware'\n\nconst _waspGlobalMiddlewareConfigFn = (mc: MiddlewareConfig) => mc\n\n// This is the set of middleware Wasp supplies by default.\n// NOTE: Remember to update the docs of these change.\nconst defaultGlobalMiddlewareConfig: MiddlewareConfig = new Map([\n  ['helmet', helmet()],\n  ['cors', cors({ origin: config.allowedCORSOrigins })],\n  ['logger', logger('dev')],\n  ['express.json', express.json()],\n  ['express.urlencoded', express.urlencoded({ extended: false })],\n  ['cookieParser', cookieParser()]\n])\n\n// This is the global middleware that is the result of applying the user's modifications.\n// It will be used as the basis for Operations and APIs (unless they are further customized).\nconst globalMiddlewareConfig: MiddlewareConfig = _waspGlobalMiddlewareConfigFn(defaultGlobalMiddlewareConfig)\n\n// This function returns an array of Express middleware to be used by a router. It optionally\n// accepts a function that can modify the global middleware for specific route customization.\nexport function globalMiddlewareConfigForExpress(middlewareConfigFn?: MiddlewareConfigFn): express.RequestHandler[] {\n  if (!middlewareConfigFn) {\n    return Array.from(globalMiddlewareConfig.values())\n  }\n\n  // Make a clone so they can't mess up the global Map for any other routes calling this.\n  const globalMiddlewareConfigClone = new Map(globalMiddlewareConfig)\n  const modifiedMiddlewareConfig = middlewareConfigFn(globalMiddlewareConfigClone)\n  return Array.from(modifiedMiddlewareConfig.values())\n}\n","import { serialize as superjsonSerialize } from 'superjson'\nimport { handleRejection } from 'wasp/server/utils'\nimport { throwInvalidCredentialsError } from 'wasp/auth/utils'\n\nexport default handleRejection(async (req, res) => {\n  if (req.user) {\n    return res.json(superjsonSerialize(req.user))\n  } else {\n    throwInvalidCredentialsError()\n  }\n})\n","import { handleRejection } from 'wasp/server/utils'\nimport { throwInvalidCredentialsError } from 'wasp/auth/utils'\nimport { invalidateSession } from 'wasp/auth/session'\n\nexport default handleRejection(async (req, res) => {\n  if (req.sessionId) {\n    await invalidateSession(req.sessionId)\n    return res.json({ success: true })\n  } else {\n    throwInvalidCredentialsError()\n  }\n})\n","import { throwInvalidCredentialsError } from 'wasp/auth/utils'\nimport { handleRejection } from 'wasp/server/utils'\nimport { verifyPassword } from 'wasp/auth/password'\n\nimport {\n  createProviderId,\n  findAuthIdentity,\n  findAuthWithUserBy,\n  deserializeAndSanitizeProviderData,\n} from 'wasp/auth/utils'\nimport { createSession } from 'wasp/auth/session'\nimport { ensureValidUsername, ensurePasswordIsPresent } from 'wasp/auth/validation'\n\nexport default handleRejection(async (req, res) => {\n  const fields = req.body ?? {}\n  ensureValidArgs(fields)\n\n  const providerId = createProviderId('username', fields.username)\n  const authIdentity = await findAuthIdentity(providerId)\n  if (!authIdentity) {\n    throwInvalidCredentialsError()\n  }\n\n  try {\n    const providerData = deserializeAndSanitizeProviderData<'username'>(authIdentity.providerData)\n\n    await verifyPassword(providerData.hashedPassword, fields.password)\n  } catch(e) {\n    throwInvalidCredentialsError()\n  }\n\n  const auth = await findAuthWithUserBy({\n    id: authIdentity.authId\n  }) \n\n  const session = await createSession(auth.id)\n\n  return res.json({\n      sessionId: session.id,\n  })\n})\n\nfunction ensureValidArgs(args: unknown): void {\n  ensureValidUsername(args);\n  ensurePasswordIsPresent(args);\n}\n","import { handleRejection } from 'wasp/server/utils'\nimport {\n  createProviderId,\n  createUser,\n  rethrowPossibleAuthError,\n  sanitizeAndSerializeProviderData,\n} from 'wasp/auth/utils'\nimport {\n  ensureValidUsername,\n  ensurePasswordIsPresent,\n  ensureValidPassword,\n} from 'wasp/auth/validation'\nimport { validateAndGetUserFields } from 'wasp/auth/utils'\nimport { type UserSignupFields } from 'wasp/auth/providers/types'\n\nexport function getSignupRoute({\n  userSignupFields,\n}: {\n  userSignupFields?: UserSignupFields;\n}) {\n  return handleRejection(async function signup(req, res) {\n    const fields = req.body ?? {}\n    ensureValidArgs(fields)\n  \n    const userFields = await validateAndGetUserFields(\n      fields,\n      userSignupFields,\n    );\n  \n    const providerId = createProviderId('username', fields.username)\n    const providerData = await sanitizeAndSerializeProviderData<'username'>({\n      hashedPassword: fields.password,\n    })\n  \n    try {\n      await createUser(\n        providerId,\n        providerData,\n        // Using any here because we want to avoid TypeScript errors and\n        // rely on Prisma to validate the data.\n        userFields as any\n      )\n    } catch (e: unknown) {\n      rethrowPossibleAuthError(e)\n    }\n  \n    return res.json({ success: true })\n  })\n}\n\nfunction ensureValidArgs(args: unknown): void {\n  ensureValidUsername(args)\n  ensurePasswordIsPresent(args)\n  ensureValidPassword(args)\n}\n","\nimport { Router } from \"express\";\n\nimport login from \"../username/login.js\";\nimport { getSignupRoute } from \"../username/signup.js\";\nimport { ProviderConfig } from \"wasp/auth/providers/types\";\n\nconst _waspUserSignupFields = undefined\n\nconst config: ProviderConfig = {\n    id: \"username\",\n    displayName: \"Username and password\",\n    createRouter() {\n        const router = Router();\n\n        router.post('/login', login);\n        const signupRoute = getSignupRoute({\n            userSignupFields: _waspUserSignupFields,\n        });\n        router.post('/signup', signupRoute);\n\n        return router;\n    },\n}\n\nexport default config;\n","import { Router } from \"express\";\n\nimport username from './config/username.js'\n\nconst providers = [\n  username,\n];\n\nconst router = Router();\n\n\nfor (const provider of providers) {\n  const { createRouter } = provider;\n  const providerRouter = createRouter(provider);\n  router.use(`/${provider.id}`, providerRouter);\n  console.log(`🚀 \"${provider.displayName}\" auth initialized`);\n}\n\nexport default router;\n","import express from 'express'\n\nimport auth from 'wasp/core/auth'\nimport me from './me.js'\nimport logout from './logout.js'\n\nimport providersRouter from '../../auth/providers/index.js'\n\nconst router = express.Router()\n\nrouter.get('/me', auth, me)\nrouter.post('/logout', auth, logout)\nrouter.use('/', providersRouter)\n\nexport default router\n","import express from 'express'\nimport operations from './operations/index.js'\nimport { globalMiddlewareConfigForExpress } from '../middleware/index.js'\nimport auth from './auth/index.js'\n\n\nconst router = express.Router()\nconst middleware = globalMiddlewareConfigForExpress()\n\nrouter.get('/', middleware, function (_req, res, _next) {\n  res.json('Hello world')\n})\n\nrouter.use('/auth', middleware, auth)\nrouter.use('/operations', middleware, operations)\n\nexport default router\n","import express from 'express'\n\nimport { HttpError } from 'wasp/server'\nimport indexRouter from './routes/index.js'\n\n// TODO: Consider extracting most of this logic into createApp(routes, path) function so that\n//   it can be used in unit tests to test each route individually.\n\nconst app = express()\n\n// NOTE: Middleware are installed on a per-router or per-route basis.\n\napp.use('/', indexRouter)\n\n// Custom error handler.\napp.use((err, _req, res, next) => {\n  // As by expressjs documentation, when the headers have already\n  // been sent to the client, we must delegate to the default error handler.\n  if (res.headersSent) { return next(err) }\n\n  if (err instanceof HttpError) {\n    return res.status(err.statusCode).json({ message: err.message, data: err.data })\n  }\n\n  // This forwards the error to the default express error handler.\n  // As described by expressjs documentation, the default error handler sets response status\n  // to err.status or err.statusCode if it is 4xx or 5xx, and if not, sets it to 500.\n  // It won't add any more info to it if server is running in production, which is exactly what we want,\n  // we want to share as little info as possible when error happens in production, for security reasons,\n  // so they will get only status code if set, or 500 if not, no extra info.\n  // In development it will also share the error stack though, which is useful.\n  // If the user wants to put more information about the error into the response, they should use HttpError.\n  return next(err)\n})\n\nexport default app\n","// This is a polyfill for Node.js 18 webcrypto API so Lucia can use it\n// for random number generation.\n\nimport { webcrypto } from \"node:crypto\";\n\n// NOTE: node < 19 doesn't have Crypto API, which we need for Lucia, so we apply the polyfill if Crypto API is not defined.\nif (typeof globalThis.crypto === \"undefined\") {\n  // @ts-ignore\n  globalThis.crypto = webcrypto as Crypto;\n}\n\n","import http from 'http'\n\nimport app from './app.js'\nimport { config } from 'wasp/server'\n\n\n\n\nimport './polyfill.js'\n\nconst startServer = async () => {\n\n  const port = normalizePort(config.port)\n  app.set('port', port)\n\n  const server = http.createServer(app)\n\n\n\n  server.listen(port)\n\n  server.on('error', (error: NodeJS.ErrnoException) => {\n    if (error.syscall !== 'listen') throw error\n    const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port\n    // handle specific listen errors with friendly messages\n    switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges')\n      process.exit(1)\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use')\n      process.exit(1)\n    default:\n      throw error\n    }\n  })\n\n  server.on('listening', () => {\n    const addr = server.address()\n    const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port\n    console.log('Server listening on ' + bind)\n  })\n}\n\nstartServer().catch(e => console.error(e))\n\n/**\n * Normalize a port into a number, string, or false.\n */\nfunction normalizePort (val) {\n  const port = parseInt(val, 10)\n  if (isNaN(port)) return val // named pipe\n  if (port >= 0) return port // port number\n  return false\n}\n"],"names":["superjsonDeserialize","superjsonSerialize","createTask","updateTask","getTasks","router","config","ensureValidArgs","username","providersRouter","auth","operations","indexRouter"],"mappings":"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"}